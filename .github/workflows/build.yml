name: Build and test
on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os-version: [latest]
        os: [macos, ubuntu, windows]
        include:
          - os: macos
            dep-command: env HOMEBREW_NO_AUTO_UPDATE=1 brew install fmt llvm make pkg-config
            build-command: LLVM_CONFIG=`brew --prefix llvm`/bin/llvm-config CC=clang CXX=clang++ gmake -j5
            shell: bash
          - os: ubuntu
            dep-command: sudo apt update; sudo apt install libfmt-dev llvm
            build-command: CC=clang CXX=clang++ make -j3
            shell: bash
          - os: windows
            dep-command: mingw-w64-x86_64-make mingw-w64-x86_64-pkgconf mingw-w64-x86_64-llvm mingw-w64-x86_64-clang mingw-w64-x86_64-fmt
            build-command: CC=clang CXX=clang++ mingw32-make -j3
            shell: msys2 {0}
    runs-on: ${{ matrix.os }}-${{ matrix.os-version }}
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install dependencies
        if: ${{ matrix.os != 'windows' }}
        run: ${{ matrix.dep-command }}
      - name: Install msys2
        if: ${{ matrix.os == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: ${{ matrix.dep-command }}
      - name: Build executable
        run: |
          echo "::add-matcher::.github/workflows/clang-problem-match.json" 
          ${{ matrix.build-command }}
          echo "::remove-matcher owner=clang-problems::"
      - name: Cache object code
        uses: actions/cache@v2
        with:
          path: |
            build/
          key: ${{ matrix.os }}-${{ matrix.os-version }}-build-${{ github.run_id }}

  test:
    strategy:
      fail-fast: false
      matrix:
        os-version: [latest]
        os: [macos, ubuntu, windows]
        test-type: [unit, regression]
        include:
          - os: macos
            dep-command: env HOMEBREW_NO_AUTO_UPDATE=1 brew install fmt llvm make pkg-config
            make-command: LLVM_CONFIG=`brew --prefix llvm`/bin/llvm-config CC=clang CXX=clang++ gmake -j5
            shell: bash
          - os: ubuntu
            dep-command: sudo apt update; sudo apt install libfmt-dev llvm
            make-command: CC=clang CXX=clang++ make -j3
            shell: bash
          - os: windows
            dep-command: mingw-w64-x86_64-make mingw-w64-x86_64-cmake mingw-w64-x86_64-pkgconf mingw-w64-x86_64-llvm mingw-w64-x86_64-clang mingw-w64-x86_64-fmt mingw-w64-x86_64-diffutils mingw-w64-x86_64-sed
            make-command: CC=clang CXX=clang++ CMAKE_ARGS="-G \"MinGW Makefiles\"" mingw32-make -j3
            shell: msys2 {0}
    runs-on: ${{ matrix.os }}-${{ matrix.os-version }}
    needs: [build]
    defaults:
      run:
        shell: ${{ matrix.shell }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Install dependencies
        if: ${{ matrix.os != 'windows' }}
        run: ${{ matrix.dep-command }}
      - name: Install msys2
        if: ${{ matrix.os == 'windows' }}
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: ${{ matrix.dep-command }}
      - name: Retrieve build from cache
        id: cache-retrieve
        uses: actions/cache@v2
        with:
          path: |
            build/
          key: ${{ matrix.os }}-${{ matrix.os-version }}-build-${{ github.run_id }}
      - name: touch build in cache
        if: steps.cache-retrieve.outputs.cache-hit == 'true'
        run: find ./build -type f -exec touch {} +
      - name: Build executable
        if: steps.cache-retrieve.outputs.cache-hit != 'true'
        run: |
          ${{ matrix.make-command }}
      - name: Run tests
        run: |
          echo "::add-matcher::.github/workflows/diff-problem-match.json" 
          ${{ matrix.make-command }} test-${{ matrix.test-type }}
          echo "::remove-matcher owner=diff-problems::"
          echo "::remove-matcher owner=diff-warnings::"
      - name: Upload test results
        if: ${{ matrix.test-type == 'unit' }}
        uses: actions/upload-artifact@v2
        with:
          name: znoc-${{ matrix.os }}-${{ matrix.os-version }}-test-results
          path: test/unit/build/out.xml
          retention-days: 1

  publish-tests:
    runs-on: ubuntu-latest
    needs: [test]
    if: success() || failure()
    steps:
      - name: Download all test results
        uses: actions/download-artifact@v2
        with:
          path: test-results
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          report_individual_runs: "true"
          files: |
            test-results/**/*.xml
            
  publish-discord:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [build]
    steps:
      - name: Set env
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "GITHUB_SHA=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
      - name: Download executable (macos)
        uses: actions/cache@v2
        with:
          path: |
            build/
          key: macos-latest-build-${{ github.run_id }}
      - name: Publish executable on discord (macos)
        run: |
          curl -F 'payload_json={"content": "macos build - [commit ${{ env.GITHUB_SHA_SHORT }}](https://github.com/egkoppel/znoc/commit/${{ env.GITHUB_SHA }})"}' -F "file1=@build/znoc" ${{ secrets.DISCORD_WEBHOOK }}
          rm -rf build
      - name: Download executable (linux)
        uses: actions/cache@v2
        with:
          path: |
            build/
          key: ubuntu-latest-build-${{ github.run_id }}
      - name: Publish executable on discord (Linux)
        run: |
          curl -F 'payload_json={"content": "linux build - [commit ${{ env.GITHUB_SHA_SHORT }}](https://github.com/egkoppel/znoc/commit/${{ env.GITHUB_SHA }})"}' -F "file1=@build/znoc" ${{ secrets.DISCORD_WEBHOOK }}
          rm -rf build
      - name: Download executable (windows)
        uses: actions/cache@v2
        with:
          path: |
            build/
          key: windows-latest-build-${{ github.run_id }}
      - name: Publish executable on discord (Windows)
        run: |
          ls build
          curl -F 'payload_json={"content": "windows build - [commit ${{ env.GITHUB_SHA_SHORT }}](https://github.com/egkoppel/znoc/commit/${{ env.GITHUB_SHA }})"}' -F "file1=@build/znoc.exe" ${{ secrets.DISCORD_WEBHOOK }}
          rm -rf build

