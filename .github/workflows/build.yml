name: Build and test
on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          env HOMEBREW_NO_AUTO_UPDATE=1 brew install fmt llvm make pkg-config
      - name: Build executable
        run: |
          cd znoc
          LLVM_CONFIG=`brew --prefix llvm`/bin/llvm-config CC=clang CXX=clang++ gmake
      - name: Upload built executable
        uses: actions/upload-artifact@v2
        with:
          name: znoc-macos
          path: znoc/build/znoc
      - name: Cache object code
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: macos-build-${{ github.run_id }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libfmt-dev llvm
      - name: Build executable
        run: |
          cd znoc
          CC=clang CXX=clang++ make
      - name: Upload built executable
        uses: actions/upload-artifact@v2
        with:
          name: znoc-linux
          path: znoc/build/znoc
      - name: Cache object code
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: linux-build-${{ github.run_id }}
  
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Install msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-make mingw-w64-x86_64-pkgconf mingw-w64-x86_64-llvm mingw-w64-x86_64-clang mingw-w64-x86_64-fmt
      - name: Build executable
        run: |
          cd znoc
          CC=clang CXX=clang++ mingw32-make
      - name: Upload built executable
        uses: actions/upload-artifact@v2
        with:
          name: znoc-windows
          path: znoc/build/znoc.exe
      - name: Cache object code
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: windows-build-${{ github.run_id }}


  test-macos:
    runs-on: macos-latest
    needs: build-macos
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Retrieve build from cache
        id: cache-retrieve
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: macos-build-${{ github.run_id }}
      - name: Install dependencies
        run: |
          env HOMEBREW_NO_AUTO_UPDATE=1 brew install fmt llvm make pkg-config
      - name: Build executable
        if: steps.cache-retrieve.outputs.cache-hit != 'true'
        run: |
          cd znoc
          LLVM_CONFIG=`brew --prefix llvm`/bin/llvm-config CC=clang CXX=clang++ make
      - name: Run tests
        run: |
          ls znoc/build
          cd znoc
          LLVM_CONFIG=`brew --prefix llvm`/bin/llvm-config CC=clang CXX=clang++ gmake test
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: znoc-macos-test-results
          path: znoc/test/unit/build/out.xml
          retention-days: 1
  
  test-linux:
    runs-on: ubuntu-latest
    needs: build-linux
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Retrieve build from cache
        id: cache-retrieve
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: linux-build-${{ github.run_id }}
      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install libfmt-dev llvm
      - name: Build executable
        if: steps.cache-retrieve.outputs.cache-hit != 'true'
        run: |
          cd znoc
          CC=clang CXX=clang++ make
      - name: Run tests
        run: |
          ls znoc/build
          cd znoc
          CC=clang CXX=clang++ make test
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: znoc-linux-test-results
          path: znoc/test/unit/build/out.xml
          retention-days: 1

  test-windows:
    runs-on: windows-latest
    needs: build-windows
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'true'
      - name: Install msys2
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: mingw-w64-x86_64-make mingw-w64-x86_64-cmake mingw-w64-x86_64-pkgconf mingw-w64-x86_64-llvm mingw-w64-x86_64-clang mingw-w64-x86_64-fmt
      - name: Retrieve build from cache
        id: cache-retrieve
        uses: actions/cache@v2
        with:
          path: |
            znoc/build/
          key: windows-build-${{ github.run_id }}
      - name: Build executable
        if: steps.cache-retrieve.outputs.cache-hit != 'true'
        run: |
          cd znoc
          CC=clang CXX=clang++ mingw32-make
      - name: Run tests
        run: |
          ls znoc/build
          cd znoc
          CC=clang CXX=clang++ CMAKE_ARGS="-G \"MinGW Makefiles\"" mingw32-make test
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: znoc-windows-test-results
          path: znoc/test/unit/build/out.xml
          retention-days: 1

  publish-tests:
    runs-on: ubuntu-latest
    needs: [test-macos, test-linux, test-windows]
    if: always()
    steps:
      - name: Download test results (macos)
        uses: actions/download-artifact@v2
        with:
          name: znoc-macos-test-results
          if-no-files-found: error
          path: macos
      - name: Download test results (linux)
        uses: actions/download-artifact@v2
        with:
          name: znoc-linux-test-results
          if-no-files-found: error
          path: linux
      - name: Download test results (windows)
        uses: actions/download-artifact@v2
        with:
          name: znoc-windows-test-results
          if-no-files-found: error
          path: windows
      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          report_individual_runs: "true"
          files: |
            macos/out.xml
            linux/out.xml
            windows/out.xml
            
  publish-discord:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
    needs: [build-macos, build-linux, build-windows]
    steps:
      - name: Download executable (macos)
        uses: actions/download-artifact@v2
        with:
          name: znoc-macos
          if-no-files-found: error
          path: macos
      - name: Download executable (linux)
        uses: actions/download-artifact@v2
        with:
          name: znoc-linux
          if-no-files-found: error
          path: linux
      - name: Download executable (windows)
        uses: actions/download-artifact@v2
        with:
          name: znoc-windows
          if-no-files-found: error
          path: windows
      - name: Publish executable on discord
        runs: |
          curl -F 'payload_json={"content": "macos build"}' -F "file1=@macos/znoc" ${{ secrets.DISCORD_WEBHOOK }}
          curl -F 'payload_json={"content": "linux build"}' -F "file1=@linux/znoc" ${{ secrets.DISCORD_WEBHOOK }}
          curl -F 'payload_json={"content": "windows build"}' -F "file1=@windows/znoc.exe" ${{ secrets.DISCORD_WEBHOOK }}
